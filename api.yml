# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /hello:
    get:
      summary: This is just a test endpoint to get you started.
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Test return
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/HelloResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_estate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_estate_post_response'
          description: Successful operation
        "400":
          description: Invalid input
      summary: Creates a new estate
  /estate/{id}/tree:
    post:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_estate_tree'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_estate_tree_post_response'
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Estate not found
      summary: Stores tree data in a given estate
components:
  schemas:
    HelloResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Hello, World!
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    _estate_post_response:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
      type: object
    _estate:
      properties:
        width:
          maximum: 50000
          minimum: 1
          type: integer
        length:
          maximum: 50000
          minimum: 1
          type: integer
      type: object
    _estate_tree_post_response:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
      type: object
    _estate_tree:
      properties:
        x:
          minimum: 1
          type: integer
        "y":
          minimum: 1
          type: integer
        height:
          maximum: 30
          minimum: 1
          type: integer
      type: object